void zCInput::InitializeControlValues()
{
	int layout = 0x7040000;
	if ( kbdLayout == -1 ) {
		void* memory = 0;
		int count = zoptions->ReadRaw(zOPT_SEC_GAME, "keyboardLayout", &memory, &layout, 4);
		if ( memory ) {
			if ( count == 4 )
				kbdLayout = *(int*)memory;
			delete memory;
		}
	}

	if ( kbdLayout != layout && kbdLayout != 0x9040200 ) {
		kbdLayout = layout;
		zoptions->WriteRaw(zOPT_SEC_GAME, "keyboardLayout", &kbdLayout, 4, 0);
	}

	bool ger = kbdLayout == 0x7040000;
	if ( ger ) {
		zCInput::values.InsertEnd({"MAUS-X", 516});
		zCInput::values.InsertEnd({"MAUS-X", 517});
		zCInput::values.InsertEnd({"MAUSRAD AUF", 522});
		zCInput::values.InsertEnd({"MAUSRAD AB", 523});
		zCInput::values.InsertEnd({"MAUSRAD LINKS", 524});
		zCInput::values.InsertEnd({"MAUSRAD RECHTS", 525});
		zCInput::values.InsertEnd({"MAUS MITTE", 526});
		zCInput::values.InsertEnd({"MAUS X1", 527});
		zCInput::values.InsertEnd({"MAUS X2", 528});
		zCInput::values.InsertEnd({"MAUS X3", 529});
		zCInput::values.InsertEnd({"MAUS X4", 530});
		zCInput::values.InsertEnd({"MAUS X5", 531});
	} else {
		zCInput::values.InsertEnd({"MOUSE-X", 516});
		zCInput::values.InsertEnd({"MOUSE-X", 517});
		zCInput::values.InsertEnd({"WHEEL UP", 522});
		zCInput::values.InsertEnd({"WHEEL DOWN", 523});
		zCInput::values.InsertEnd({"WHEEL LEFT", 524});
		zCInput::values.InsertEnd({"WHEEL RIGHT", 525});
		zCInput::values.InsertEnd({"MOUSE MID", 526});
		zCInput::values.InsertEnd({"MOUSE X1", 527});
		zCInput::values.InsertEnd({"MOUSE X2", 528});
		zCInput::values.InsertEnd({"MOUSE X3", 529});
		zCInput::values.InsertEnd({"MOUSE X4", 530});
		zCInput::values.InsertEnd({"MOUSE X5", 531});
	}

	zCInput::values.InsertEnd({"ESC", KEY_ESCAPE});
	zCInput::values.InsertEnd({"F1",  KEY_F1});
	zCInput::values.InsertEnd({"F2",  KEY_F2});
	zCInput::values.InsertEnd({"F3",  KEY_F3});
	zCInput::values.InsertEnd({"F4",  KEY_F4});
	zCInput::values.InsertEnd({"F5",  KEY_F5});
	zCInput::values.InsertEnd({"F6",  KEY_F6});
	zCInput::values.InsertEnd({"F7",  KEY_F7});
	zCInput::values.InsertEnd({"F8",  KEY_F8});
	zCInput::values.InsertEnd({"F9",  KEY_F9});
	zCInput::values.InsertEnd({"F10", KEY_F10});
	zCInput::values.InsertEnd({"F11", KEY_F11});
	zCInput::values.InsertEnd({"F12", KEY_F12});
	zCInput::values.InsertEnd({"F13", KEY_F13});
	zCInput::values.InsertEnd({"F14", KEY_F14});
	zCInput::values.InsertEnd({"F15", KEY_F15});

	if ( ger ) {
		zCInput::values.InsertEnd({"DRUCK",     KEY_SYSRQ});
		zCInput::values.InsertEnd({"ROLLEN-FESTSTELL", KEY_SCROLL});
		zCInput::values.InsertEnd({"PAUSE",     KEY_PAUSE});
		zCInput::values.InsertEnd({"EINF-GEN",  KEY_INSERT});
		zCInput::values.InsertEnd({"POS1",      KEY_HOME});
		zCInput::values.InsertEnd({"BILD-AUF",  KEY_PRIOR});
		zCInput::values.InsertEnd({"ENTFERNEN", KEY_DELETE});
		zCInput::values.InsertEnd({"ENDE",      KEY_END});
		zCInput::values.InsertEnd({"BILD-AB",   KEY_NEXT});
		zCInput::values.InsertEnd({"NACH-OBEN",   KEY_UPARROW});
		zCInput::values.InsertEnd({"NACH-LINKS",  KEY_LEFTARROW});
		zCInput::values.InsertEnd({"NACH-UNTEN",  KEY_DOWNARROW});
		zCInput::values.InsertEnd({"NACH-RECHTS", KEY_RIGHTARROW});
		zCInput::values.InsertEnd({"NUM-FESTSTELL", KEY_NUMLOCK});
		zCInput::values.InsertEnd({"NUM DIV",    KEY_DIVIDE});
		zCInput::values.InsertEnd({"NUM MUL",    KEY_MULTIPLY});
		zCInput::values.InsertEnd({"NUM SUB",    KEY_SUBTRACT});
		zCInput::values.InsertEnd({"NUM ENTER",  KEY_NUMPADENTER});
		zCInput::values.InsertEnd({"NUM ENTF",   KEY_DECIMAL});
		zCInput::values.InsertEnd({"NUM 0", KEY_NUMPAD0});
		zCInput::values.InsertEnd({"NUM 1", KEY_NUMPAD1});
		zCInput::values.InsertEnd({"NUM 2", KEY_NUMPAD2});
		zCInput::values.InsertEnd({"NUM 3", KEY_NUMPAD3});
		zCInput::values.InsertEnd({"NUM 4", KEY_NUMPAD4});
		zCInput::values.InsertEnd({"NUM 5", KEY_NUMPAD5});
		zCInput::values.InsertEnd({"NUM 6", KEY_NUMPAD6});
		zCInput::values.InsertEnd({"NUM 7", KEY_NUMPAD7});
		zCInput::values.InsertEnd({"NUM 8", KEY_NUMPAD8});
		zCInput::values.InsertEnd({"NUM 9", KEY_NUMPAD9});
		zCInput::values.InsertEnd({"R-CK",      KEY_BACK});
		zCInput::values.InsertEnd({"TABULATOR", KEY_TAB});
		zCInput::values.InsertEnd({"ENTER", KEY_RETURN});
		zCInput::values.InsertEnd({"FESTSTELL", KEY_CAPITAL});
		zCInput::values.InsertEnd({"UMSCHALT LINKS", KEY_LSHIFT});
		zCInput::values.InsertEnd({"UMSCHALT RECHTS", KEY_RSHIFT});
		zCInput::values.InsertEnd({"STRG LINKS", KEY_LCONTROL});
		zCInput::values.InsertEnd({"OS-LOGO LINKS", KEY_LWIN});
		zCInput::values.InsertEnd({"ALT", KEY_LMENU});
		zCInput::values.InsertEnd({"LEERTASTE", KEY_SPACE});
		zCInput::values.InsertEnd({"ALT GR", KEY_RMENU});
		zCInput::values.InsertEnd({"OS-LOGO RECHTS", KEY_RWIN});
		zCInput::values.InsertEnd({"KONTEXT", 349});
		zCInput::values.InsertEnd({"STRG RECHTS", KEY_RCONTROL});
		zCInput::values.InsertEnd({"ZIRKUMFLEX", KEY_GRAVE});
		zCInput::values.InsertEnd({"1", KEY_1});
		zCInput::values.InsertEnd({"2", KEY_2});
		zCInput::values.InsertEnd({"3", KEY_3});
		zCInput::values.InsertEnd({"4", KEY_4});
		zCInput::values.InsertEnd({"5", KEY_5});
		zCInput::values.InsertEnd({"6", KEY_6});
		zCInput::values.InsertEnd({"7", KEY_7});
		zCInput::values.InsertEnd({"8", KEY_8});
		zCInput::values.InsertEnd({"9", KEY_9});
		zCInput::values.InsertEnd({"0", KEY_0});
		zCInput::values.InsertEnd({"-", KEY_MINUS});
		zCInput::values.InsertEnd({"AKZENT", KEY_EQUALS});
		zCInput::values.InsertEnd({"Q", KEY_Q});
		zCInput::values.InsertEnd({"W", KEY_W});
		zCInput::values.InsertEnd({"E", KEY_E});
		zCInput::values.InsertEnd({"R", KEY_R});
		zCInput::values.InsertEnd({"T", KEY_T});
		zCInput::values.InsertEnd({"Z", KEY_Y});
		zCInput::values.InsertEnd({"U", KEY_U});
		zCInput::values.InsertEnd({"I", KEY_I});
		zCInput::values.InsertEnd({"O", KEY_O});
		zCInput::values.InsertEnd({"P", KEY_P});
		zCInput::values.InsertEnd({"-",    KEY_LBRACKET});
		zCInput::values.InsertEnd({"PLUS", KEY_RBRACKET});
		zCInput::values.InsertEnd({"A", KEY_A});
		zCInput::values.InsertEnd({"S", KEY_S});
		zCInput::values.InsertEnd({"D", KEY_D});
		zCInput::values.InsertEnd({"F", KEY_F});
		zCInput::values.InsertEnd({"G", KEY_G});
		zCInput::values.InsertEnd({"H", KEY_H});
		zCInput::values.InsertEnd({"J", KEY_J});
		zCInput::values.InsertEnd({"K", KEY_K});
		zCInput::values.InsertEnd({"L", KEY_L});
		zCInput::values.InsertEnd({"Ã–", KEY_SEMICOLON});
		zCInput::values.InsertEnd({"-", KEY_APOSTROPHE});
		zCInput::values.InsertEnd({"RAUTE", KEY_BACKSHASH});
		zCInput::values.InsertEnd({"KLEINER-ALS", KEY_OEM_102});
		zCInput::values.InsertEnd({"Y", KEY_Z});
		zCInput::values.InsertEnd({"X", KEY_X});
		zCInput::values.InsertEnd({"C", KEY_C});
		zCInput::values.InsertEnd({"V", KEY_V});
		zCInput::values.InsertEnd({"B", KEY_B});
		zCInput::values.InsertEnd({"N", KEY_N});
		zCInput::values.InsertEnd({"M", KEY_M});
		zCInput::values.InsertEnd({"KOMMA", KEY_COMMA});
		zCInput::values.InsertEnd({"PUNKT", KEY_PERIOD});
		zCInput::values.InsertEnd({"MINUS", KEY_SLASH});

		zCInput::values.InsertEnd({"JOY-LINKS", 532});
		zCInput::values.InsertEnd({"JOY-RECHTS", 533});
		zCInput::values.InsertEnd({"JOY-OBEN", 534});
		zCInput::values.InsertEnd({"JOY-UNTEN", 535});
		zCInput::values.InsertEnd({"SCHUBREGLER AUF", 536});
		zCInput::values.InsertEnd({"SCHUBREGLER AB", 537});
		zCInput::values.InsertEnd({"RUDER LINKS", 538});
		zCInput::values.InsertEnd({"RUDER RECHTS", 539});
		zCInput::values.InsertEnd({"POV-LINKS", 540});
		zCInput::values.InsertEnd({"POV-RECHTS", 541});
		zCInput::values.InsertEnd({"POV-OBEN", 542});
		zCInput::values.InsertEnd({"POV-UNTEN", 543});
	} else {
		zCInput::values.InsertEnd({"PRINT",      KEY_SYSRQ});
		zCInput::values.InsertEnd({"SCROLLLOCK", KEY_SCROLL});
		zCInput::values.InsertEnd({"PAUSE",      KEY_PAUSE});
		zCInput::values.InsertEnd({"INSERT",     KEY_INSERT});
		zCInput::values.InsertEnd({"HOME",       KEY_HOME});
		zCInput::values.InsertEnd({"PAGE UP",    KEY_PRIOR});
		zCInput::values.InsertEnd({"DELETE",     KEY_DELETE});
		zCInput::values.InsertEnd({"END",        KEY_END});
		zCInput::values.InsertEnd({"PAGE DOWN",  KEY_NEXT});
		zCInput::values.InsertEnd({"CURSOR UP",    KEY_UPARROW});
		zCInput::values.InsertEnd({"CURSOR LEFT",  KEY_LEFTARROW});
		zCInput::values.InsertEnd({"CURSOR DOWN",  KEY_DOWNARROW});
		zCInput::values.InsertEnd({"CURSOR RIGHT", KEY_RIGHTARROW});
		zCInput::values.InsertEnd({"NUMLOCK",    KEY_NUMLOCK});
		zCInput::values.InsertEnd({"NUM DIV",    KEY_DIVIDE});
		zCInput::values.InsertEnd({"NUM MUL",    KEY_MULTIPLY});
		zCInput::values.InsertEnd({"NUM SUB",    KEY_SUBTRACT});
		zCInput::values.InsertEnd({"NUM ENTER",  KEY_NUMPADENTER});
		zCInput::values.InsertEnd({"NUM DEL",    KEY_DECIMAL});
		zCInput::values.InsertEnd({"NUM 0", KEY_NUMPAD0});
		zCInput::values.InsertEnd({"NUM 1", KEY_NUMPAD1});
		zCInput::values.InsertEnd({"NUM 2", KEY_NUMPAD2});
		zCInput::values.InsertEnd({"NUM 3", KEY_NUMPAD3});
		zCInput::values.InsertEnd({"NUM 4", KEY_NUMPAD4});
		zCInput::values.InsertEnd({"NUM 5", KEY_NUMPAD5});
		zCInput::values.InsertEnd({"NUM 6", KEY_NUMPAD6});
		zCInput::values.InsertEnd({"NUM 7", KEY_NUMPAD7});
		zCInput::values.InsertEnd({"NUM 8", KEY_NUMPAD8});
		zCInput::values.InsertEnd({"NUM 9", KEY_NUMPAD9});
		zCInput::values.InsertEnd({"BACKSPACE", KEY_BACK});
		zCInput::values.InsertEnd({"TAB",       KEY_TAB});
		zCInput::values.InsertEnd({"ENTER",     KEY_RETURN});
		zCInput::values.InsertEnd({"CAPS LOCK", KEY_CAPITAL});
		zCInput::values.InsertEnd({"LEFT SHIFT",   KEY_LSHIFT});
		zCInput::values.InsertEnd({"RIGHT SHIFT",  KEY_RSHIFT});
		zCInput::values.InsertEnd({"LEFT CTRL",    KEY_LCONTROL});
		zCInput::values.InsertEnd({"LEFT OS KEY",  KEY_LWIN});
		zCInput::values.InsertEnd({"LEFT ALT",     KEY_LMENU});
		zCInput::values.InsertEnd({"SPACE",        KEY_SPACE});
		zCInput::values.InsertEnd({"RIGHT ALT",    KEY_RMENU});
		zCInput::values.InsertEnd({"RIGHT OS KEY", KEY_RWIN});
		zCInput::values.InsertEnd({"CONTEXT", 349});
		zCInput::values.InsertEnd({"RIGHT CTRL",   KEY_RCONTROL});
		zCInput::values.InsertEnd({"GRAVE ACCENT", KEY_GRAVE});
		zCInput::values.InsertEnd({"1", KEY_1});
		zCInput::values.InsertEnd({"2", KEY_2});
		zCInput::values.InsertEnd({"3", KEY_3});
		zCInput::values.InsertEnd({"4", KEY_4});
		zCInput::values.InsertEnd({"5", KEY_5});
		zCInput::values.InsertEnd({"6", KEY_6});
		zCInput::values.InsertEnd({"7", KEY_7});
		zCInput::values.InsertEnd({"8", KEY_8});
		zCInput::values.InsertEnd({"9", KEY_9});
		zCInput::values.InsertEnd({"0", KEY_0});
		zCInput::values.InsertEnd({"MINUS",  KEY_MINUS});
		zCInput::values.InsertEnd({"EQUALS", KEY_EQUALS});
		zCInput::values.InsertEnd({"Q", KEY_Q});
		zCInput::values.InsertEnd({"W", KEY_W});
		zCInput::values.InsertEnd({"E", KEY_E});
		zCInput::values.InsertEnd({"R", KEY_R});
		zCInput::values.InsertEnd({"T", KEY_T});
		zCInput::values.InsertEnd({"Y", KEY_Y});
		zCInput::values.InsertEnd({"U", KEY_U});
		zCInput::values.InsertEnd({"I", KEY_I});
		zCInput::values.InsertEnd({"O", KEY_O});
		zCInput::values.InsertEnd({"P", KEY_P});
		zCInput::values.InsertEnd({"LEFT BRACKET-", KEY_LBRACKET});
		zCInput::values.InsertEnd({"RIGHT BRACKET", KEY_RBRACKET});
		zCInput::values.InsertEnd({"A", KEY_A});
		zCInput::values.InsertEnd({"S", KEY_S});
		zCInput::values.InsertEnd({"D", KEY_D});
		zCInput::values.InsertEnd({"F", KEY_F});
		zCInput::values.InsertEnd({"G", KEY_G});
		zCInput::values.InsertEnd({"H", KEY_H});
		zCInput::values.InsertEnd({"J", KEY_J});
		zCInput::values.InsertEnd({"K", KEY_K});
		zCInput::values.InsertEnd({"L", KEY_L});
		zCInput::values.InsertEnd({"SEMICOLON", KEY_SEMICOLON});
		zCInput::values.InsertEnd({"APOSTROPHE", KEY_APOSTROPHE});
		zCInput::values.InsertEnd({"BACKSLASH", KEY_BACKSHASH});
		zCInput::values.InsertEnd({"PIPE", KEY_OEM_102});
		zCInput::values.InsertEnd({"Z", KEY_Z});
		zCInput::values.InsertEnd({"X", KEY_X});
		zCInput::values.InsertEnd({"C", KEY_C});
		zCInput::values.InsertEnd({"V", KEY_V});
		zCInput::values.InsertEnd({"B", KEY_B});
		zCInput::values.InsertEnd({"N", KEY_N});
		zCInput::values.InsertEnd({"M", KEY_M});
		zCInput::values.InsertEnd({"COMMA", KEY_COMMA});
		zCInput::values.InsertEnd({"PERIOD", KEY_PERIOD});
		zCInput::values.InsertEnd({"MINUS", KEY_SLASH});

		zCInput::values.InsertEnd({"JOY LEFT", 532});
		zCInput::values.InsertEnd({"JOY RIGHT", 533});
		zCInput::values.InsertEnd({"JOY UP", 534});
		zCInput::values.InsertEnd({"JOY DOWN", 535});
		zCInput::values.InsertEnd({"THROTTLE UP", 536});
		zCInput::values.InsertEnd({"THROTTLE DOWN", 537});
		zCInput::values.InsertEnd({"RUDDER LEFT", 538});
		zCInput::values.InsertEnd({"RUDDER RIGHT", 539});
		zCInput::values.InsertEnd({"POV-LEFT", 540});
		zCInput::values.InsertEnd({"POV-RIGHT", 541});
		zCInput::values.InsertEnd({"POV-UP", 542});
		zCInput::values.InsertEnd({"POV-DOWN", 543});
	}

	zCInput::values.InsertEnd({"JOY BTN 1", 544});
	zCInput::values.InsertEnd({"JOY BTN 2", 545});
	zCInput::values.InsertEnd({"JOY BTN 3", 546});
	zCInput::values.InsertEnd({"JOY BTN 4", 547});
	zCInput::values.InsertEnd({"JOY BTN 5", 548});
	zCInput::values.InsertEnd({"JOY BTN 6", 549});
	zCInput::values.InsertEnd({"JOY BTN 7", 550});
	zCInput::values.InsertEnd({"JOY BTN 8", 551});
	zCInput::values.InsertEnd({"JOY BTN 9", 552});
	zCInput::values.InsertEnd({"JOY BTN 10", 553});
	zCInput::values.InsertEnd({"JOY BTN 11", 554});
	zCInput::values.InsertEnd({"JOY BTN 12", 555});
	zCInput::values.InsertEnd({"JOY BTN 13", 556});
	zCInput::values.InsertEnd({"JOY BTN 14", 557});
	zCInput::values.InsertEnd({"JOY BTN 15", 558});
	zCInput::values.InsertEnd({"JOY BTN 16", 559});
	zCInput::values.InsertEnd({"JOY BTN 17", 560});
	zCInput::values.InsertEnd({"JOY BTN 18", 561});
	zCInput::values.InsertEnd({"JOY BTN 19", 562});
	zCInput::values.InsertEnd({"JOY BTN 20", 563});
	zCInput::values.InsertEnd({"JOY BTN 21", 564});
	zCInput::values.InsertEnd({"JOY BTN 22", 565});
	zCInput::values.InsertEnd({"JOY BTN 23", 566});
	zCInput::values.InsertEnd({"JOY BTN 24", 567});
	zCInput::values.InsertEnd({"JOY BTN 25", 568});
	zCInput::values.InsertEnd({"JOY BTN 26", 569});
	zCInput::values.InsertEnd({"JOY BTN 27", 570});
	zCInput::values.InsertEnd({"JOY BTN 28", 571});
	zCInput::values.InsertEnd({"JOY BTN 29", 572});
	zCInput::values.InsertEnd({"JOY BTN 30", 573});
	zCInput::values.InsertEnd({"JOY BTN 31", 574});
	zCInput::values.InsertEnd({"JOY BTN 32", 575});
}
