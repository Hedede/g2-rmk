#include <cstring>
#include "zSTRING.h"

zSTRING::zSTRING(char const* str)
	: data(str)
{
}

zSTRING::zSTRING(char c)
	: data(1, c)
{
}

zSTRING::zSTRING(zSTRING const& other)
	: data(other.data)
{
}

zSTRING::zSTRING(zSTRING const* other)
	: data(other->data)
{
}

zSTRING::zSTRING(int32_t i)
	: data(std::to_string(i))
{
}

zSTRING::zSTRING(uint32_t i)
	: data(std::to_string(i))
{
}

// OK, that's not really from the engine
constexpr size_t zSTRING_MAX_DOUBLE = sizeof("-2.22507386e-308") + 1;
zSTRING::zSTRING(double f, uint8_t decimals)
	//: data(std::to_string(f))
{
	char dest[zSTRING_MAX_DOUBLE];
	char format[6];
	if (0 > decimals || decimals > 9)
		decimals = 9;

	strcpy(format, "%.9g");
	format[2] = decimals + 48;
	snprintf(dest, sizeof(dest), format, f);
	data = std::string(dest);
}

zSTRING::zSTRING(float f, uint8_t decimals)
	//: data(std::to_string(f))
{
	char dest[zSTRING_MAX_DOUBLE];
	char format[5];
	if (0 > decimals || decimals > 9)
		decimals = 9;

	strcpy(format, "%.9g");
	format[2] = decimals + 48;
	snprintf(dest, sizeof(dest), format, f);
	data = std::string(dest);
}

int zSTRING::Search(int begin, char const* substring, size_t nr) const
{
	if ( !substring || !nr )
		return -1;

	int cur = begin;
	int result = -1;

	size_t finds = 0;

	while ( 1 )
	{
		result = data.find(substring, cur);

		if ( result == std::end(data) )
			break;

		cur = result + 1;

		if ( ++finds >= nr )
			return result;
	}

	return -1;
}

char const*
zSTRING::PickWordPos(size_t nr, zSTRING const& delim1, zSTRING const& delim2) const
{
	if ( IsEmpty() )
		return 0;

	bool skip = false;
	for (size_t i = 0; i < Length(); ++i) {
		char c = data[i];
		if (delim2.data.find(c) == std::string::npos)
		{
			if (delim1.data.find(c) == std::string::npos) {
				if ( !skip ) {
					skip = true;
					if ( !--nr )
						return &data[i];
				}
				continue;
			}

			if ( !--nr )
				return &data[i];
		}
		skip = false;
	}
	return 0;
}

zSTRING zSTRING::PickWord(size_t nr, zSTRING const& delim1, zSTRING const& delim2) const
{
	if ( IsEmpty() )
		return "";

	char const* wpos = PickWordPos(nr, delim1, delim2);
	if ( !wpos )
		return "";

	zSTRING ret;
	if ( delim1.data.find(*wpos) != std::string::npos )
		ret += *wpos;

	for (; *wpos; ++wpos)
	{
		if ( delim2.data.find(*wpos) != std::string::npos )
			break;
		if ( delim1.data.find(*wpos) != std::string::npos )
			break;
		ret += *wpos;
	}

	return ret;
}

char const zLowerTable[256] = {
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
	0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
	0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
	0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x61, 0x62, 0x63, 0x64, 0x65,
	0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
	0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x5B,
	0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,
	0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71,
	0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C,
	0x7D, 0x7E, 0x7F, 0x87, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x84, 0x86, 0x82, 0x91, 0x91,
	0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x94, 0x81, 0x9B, 0x9C, 0x9B,
	0x9E, 0x9F, 0x0A0, 0x0A1, 0x0A2, 0x0A3, 0x0A4, 0x0A4, 0x0A6,
	0x0A7, 0x0A8, 0x0A9, 0x0AA, 0x0AB, 0x0AC, 0x0AD, 0x0AE, 0x0AF,
	0x0B0, 0x0B1, 0x0B2, 0x0B3, 0x0B4, 0x0A0, 0x83, 0x85, 0x0B8,
	0x0B9, 0x0BA, 0x0BB, 0x0BC, 0x0BD, 0x98, 0x0BF, 0x0C0, 0x0C1,
	0x0C2, 0x0C3, 0x0C4, 0x0C5, 0x0C7, 0x0C7, 0x0C8, 0x0C9, 0x0CA,
	0x0CB, 0x0CC, 0x0CD, 0x0CE, 0x0CF, 0x0EA, 0x0D1, 0x88, 0x89,
	0x8A, 0x0D5, 0x0A1, 0x8C, 0x8B, 0x0D9, 0x0DA, 0x0DB, 0x0DC, 0x8D,
	0x0DE, 0x0DF, 0x0A2, 0x0E1, 0x93, 0x95, 0x0E4, 0x0E4, 0x0E6,
	0x0E7, 0x0E7, 0x0A3, 0x96, 0x97, 0x0EC, 0x0EC, 0x0EE, 0x0EF,
	0x0F0, 0x0F1, 0x0F2, 0x0F3, 0x0F4, 0x0F5, 0x0F6, 0x0F7, 0x0F8,
	0x0F9, 0x0FA, 0x0FB, 0x0FC, 0x0FD, 0x0FE, 0x0FF,
};

const char zUpperTable[256] = {
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
        0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
        0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
        0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45,
        0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
        0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B,
        0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,
        0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
        0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C,
        0x7D, 0x7E, 0x7F, 0x80, 0x9A, 0x90, 0x0B6, 0x8E, 0x0B7, 0x8F,
        0x80, 0x0D2, 0x0D3, 0x0D4, 0x0D8, 0x0D7, 0x0DD, 0x8E, 0x8F, 0x90,
        0x92, 0x0E2, 0x99, 0x0E3, 0x0EA, 0x0EB, 0x0BE, 0x98, 0x99, 0x9A,
        0x9D, 0x9C, 0x9D, 0x9E, 0x9F, 0x0B5, 0x0D6, 0x0E0, 0x0E9, 0x0A5,
        0x0A5, 0x0A6, 0x0A7, 0x0A8, 0x0A9, 0x0AA, 0x0AB, 0x0AC, 0x0AD,
        0x0AE, 0x0AF, 0x0B0, 0x0B1, 0x0B2, 0x0B3, 0x0B4, 0x0B5, 0x0B6,
        0x0B7, 0x0B8, 0x0B9, 0x0BA, 0x0BB, 0x0BC, 0x0BD, 0x0BE, 0x0BF,
        0x0C0, 0x0C1, 0x0C2, 0x0C3, 0x0C4, 0x0C5, 0x0C6, 0x0C6, 0x0C8,
        0x0C9, 0x0CA, 0x0CB, 0x0CC, 0x0CD, 0x0CE, 0x0CF, 0x0D0, 0x0D1,
        0x0D2, 0x0D3, 0x0D4, 0x0D5, 0x0D6, 0x0D7, 0x0D8, 0x0D9, 0x0DA,
        0x0DB, 0x0DC, 0x0DD, 0x0DE, 0x0DF, 0x0E0, 0x0E1, 0x0E2, 0x0E3,
        0x0E5, 0x0E5, 0x0E6, 0x0E8, 0x0E8, 0x0E9, 0x0D0, 0x0EB, 0x0ED,
        0x0ED, 0x0EE, 0x0EF, 0x0F0, 0x0F1, 0x0F2, 0x0F3, 0x0F4, 0x0F5,
        0x0F6, 0x0F7, 0x0F8, 0x0F9, 0x0FA, 0x0FB, 0x0FC, 0x0FD, 0x0FE,
        0x0FF
};

zSTRING& zSTRING::Lower()
{
	for (auto it = data.begin; it != data.end(); ++data) {
		*it = zLowerTable(*it);
	}
	return *this;
}

zSTRING& zSTRING::Upper()
{
	for (auto it = data.begin; it != data.end(); ++data) {
		*it = zUpperTable(*it);
	}
	return *this;
}

zSTRING& zSTRING::UpperFirstLowerRest()
{
	if (IsEmpty())
		return *this;

	auto it = std::begin(data);
	*it++ = zUpperTable(data);

	for (auto it = data.begin; it != data.end(); ++data) {
		*it = zLowerTable(*it);
	}
	return *this;
}

unsigned long zSTRING::ToUint() const
{
	return stoul(data);
}

long zSTRING::ToInt() const
{
	return stol(data);
}

double zSTRING::ToFloat() const
{
	return stod(data);
}

char zSTRING::ToChar() const
{
	return data[0];
} 
